#include <stdio.h>
#include "stm32g4xx_hal.h"
#include "stm32g4xx_nucleo.h"
#include "main.h"

static UART_HandleTypeDef UartHandle;
static EXTI_HandleTypeDef ExtiHandle;

int __io_putchar(int ch);
int _write(int file,char *ptr, int len);
static void EXTI15_10_IRQCallback(void);
static void SystemClock_Config(void);

int main(void)
{

    SystemClock_Config();

    /* HAL initialization */
    if (HAL_Init() != HAL_OK)
    {
        Error_Handler();
    }

    /* Configure LEDs */
    BSP_LED_Init(LEDn);

    /* Configure user push button */
    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);

    /* Configure EXTI to generate interrupt for user push button GPIO */
    EXTI_ConfigTypeDef EXTI_InitStruct;
    EXTI_InitStruct.Line = EXTI_LINE_13;
    EXTI_InitStruct.Mode = EXTI_MODE_INTERRUPT;
    EXTI_InitStruct.Trigger = EXTI_TRIGGER_RISING;
    EXTI_InitStruct.GPIOSel = EXTI_GPIOC;
    if (HAL_EXTI_SetConfigLine(&ExtiHandle, &EXTI_InitStruct) != HAL_OK)
    {
        Error_Handler();
    }

    if (HAL_EXTI_RegisterCallback(&ExtiHandle, HAL_EXTI_COMMON_CB_ID, EXTI15_10_IRQCallback) != HAL_OK)
    {
        Error_Handler();
    }

    /* Configure UART for printf */
    UartHandle.Instance = USART3;
    UartHandle.Init.BaudRate = 115200;
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
    UartHandle.Init.StopBits = UART_STOPBITS_1;
    UartHandle.Init.Parity = UART_PARITY_NONE;
    UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    UartHandle.Init.Mode = UART_MODE_TX_RX;
    UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
    if (HAL_UART_Init(&UartHandle) != HAL_OK)
    {
        Error_Handler();
    }

    while (1)
    {
        printf("Hello World!\r\n");
        BSP_LED_Toggle(LEDn);
        HAL_Delay(1000);
    }
}

int __io_putchar(int ch)
{
    /* Support printf over UART */
    (void) HAL_UART_Transmit(&UartHandle, (uint8_t *) &ch, 1, 0xFFFFU);
    return ch;
}

int _write(int file, char *ptr, int len)
{
    /* Send chars over UART */
    for (int i = 0; i < len; i++)
    {
        (void) __io_putchar(*ptr++);
    }

    return len;
}

void SysTick_Handler(void)
{
    HAL_IncTick();
}

void EXTI15_10_IRQHandler(void)
{
    HAL_EXTI_IRQHandler(&ExtiHandle);
}

static void EXTI15_10_IRQCallback(void)
{
    BSP_LED_Toggle(LED2);
}

/**   * @brief System Clock Configuration   * @retval None   */
void SystemClock_Config(void) 
{   
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
	/** Configure the main internal regulator output voltage   */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
	/** Initializes the RCC Oscillators according to the specified parameters   * in the RCC_OscInitTypeDef structure.   */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV12;
	RCC_OscInitStruct.PLL.PLLN = 85;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)   {     
		Error_Handler();   
	}   
	/** Initializes the CPU, AHB and APB buses clocks   */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
				     |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)   
	{
		Error_Handler();   
	} 
} 

void Error_Handler(void)
{
    /* Turn on a red LED */
    //BSP_LED_On(LED3);
    //TODO
    BSP_LED_Off(LEDn);
    __disable_irq();

    /* Spin loop */
    while (1)
    {
        ;
    }
}
